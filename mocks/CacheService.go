// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CacheService is an autogenerated mock type for the CacheService type
type CacheService struct {
	mock.Mock
}

type CacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheService) EXPECT() *CacheService_Expecter {
	return &CacheService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *CacheService) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type CacheService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *CacheService_Expecter) Close() *CacheService_Close_Call {
	return &CacheService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *CacheService_Close_Call) Run(run func()) *CacheService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheService_Close_Call) Return(_a0 error) *CacheService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_Close_Call) RunAndReturn(run func() error) *CacheService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *CacheService) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CacheService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheService_Expecter) Delete(ctx interface{}, key interface{}) *CacheService_Delete_Call {
	return &CacheService_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *CacheService_Delete_Call) Run(run func(ctx context.Context, key string)) *CacheService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheService_Delete_Call) Return(_a0 error) *CacheService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *CacheService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPrefix provides a mock function with given fields: ctx, prefix
func (_m *CacheService) DeleteByPrefix(ctx context.Context, prefix string) error {
	ret := _m.Called(ctx, prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_DeleteByPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPrefix'
type CacheService_DeleteByPrefix_Call struct {
	*mock.Call
}

// DeleteByPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *CacheService_Expecter) DeleteByPrefix(ctx interface{}, prefix interface{}) *CacheService_DeleteByPrefix_Call {
	return &CacheService_DeleteByPrefix_Call{Call: _e.mock.On("DeleteByPrefix", ctx, prefix)}
}

func (_c *CacheService_DeleteByPrefix_Call) Run(run func(ctx context.Context, prefix string)) *CacheService_DeleteByPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheService_DeleteByPrefix_Call) Return(_a0 error) *CacheService_DeleteByPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_DeleteByPrefix_Call) RunAndReturn(run func(context.Context, string) error) *CacheService_DeleteByPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *CacheService) Get(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheService_Expecter) Get(ctx interface{}, key interface{}) *CacheService_Get_Call {
	return &CacheService_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *CacheService_Get_Call) Run(run func(ctx context.Context, key string)) *CacheService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheService_Get_Call) Return(_a0 []byte, _a1 error) *CacheService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheService_Get_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *CacheService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *CacheService) Set(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheService_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value []byte
//   - ttl time.Duration
func (_e *CacheService_Expecter) Set(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *CacheService_Set_Call {
	return &CacheService_Set_Call{Call: _e.mock.On("Set", ctx, key, value, ttl)}
}

func (_c *CacheService_Set_Call) Run(run func(ctx context.Context, key string, value []byte, ttl time.Duration)) *CacheService_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(time.Duration))
	})
	return _c
}

func (_c *CacheService_Set_Call) Return(_a0 error) *CacheService_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_Set_Call) RunAndReturn(run func(context.Context, string, []byte, time.Duration) error) *CacheService_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheService creates a new instance of CacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheService {
	mock := &CacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
